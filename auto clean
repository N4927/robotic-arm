#librerie
import RPi.GPIO as GPIO
import time
from gpiozero import Servo
import math
from gpiozero.pins.pigpio import PiGPIOFactory
#tolti gli avvertimenti 
GPIO.setwarnings(False)

#settare i motori alla factory mode
factory= PiGPIOFactory()

#esplicitare i pin dei motori
servo1 = Servo(17, pin_factory=factory)
servo2 = Servo(12, pin_factory=factory)
servo3 = Servo(24, pin_factory=factory)
servo4 = Servo(25, pin_factory=factory)
servo5 = Servo(8, pin_factory=factory)



def clean():
    #settare metodo conteggio pin
    GPIO.setmode(GPIO.BCM)
    
#settare il numero dei pin del sensore di distanza
    TRIG = 23
    ECHO = 18
    
    # inizzializare i pin del settore di distanza
    GPIO.setup(TRIG,GPIO.OUT)
    GPIO.setup(ECHO,GPIO.IN)

#inizializzare il pin Trig
    GPIO.output(TRIG, False)
    time.sleep(1)

    GPIO.output(TRIG, True)
    time.sleep(0.00001)
    GPIO.output(TRIG, False)

#segnare il momento in cui parte il suono
    while GPIO.input(ECHO)==0:
        pulse_start = time.time()

# segnare il momento di arrivo dell onda
    while GPIO.input(ECHO)==1:
        pulse_end = time.time()

# calcolare il tempo di viaggio del suono
    pulse_duration = pulse_end - pulse_start

#calcolare la distanza percorsa
    distance = pulse_duration * 17150

#arrotondo a due decimali
    distance = round(distance, 2)


    print("Distance:",distance,"cm")
    return distance
    GPIO.cleanup()
    

    
def movement():
#posizioni dei motori 
    b = 450
    c = 100
    d = 200
    e = 150
    f = 150

#comunicare la gradazione a cui devono ruotare i motori
    servo2.value= math.sin(math.radians(c))
    servo3.value= math.sin(math.radians(d))
    servo4.value= math.sin(math.radians(e))
    servo5.value= math.sin(math.radians(f))
        

    while True:
        #chiamare la distanza dalla funzione precedente
        distance = clean()
        #se la distanza è maggiore di 10 il motore ruoto 
        if distance >= 10:
            while True:
                b += 0.01
                servo1.value= math.sin(math.radians(b))
            
        #se no si ferma la rotazione
        elif distance < 10:
            b = b

#il problema è che finche va solo il ciclo che calcola la distanza funziona, 
 ma appena parte l ciclo del movimento quello della distanza si interrompe
        
        

            





movement()
